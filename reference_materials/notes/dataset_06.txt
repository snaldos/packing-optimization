In this example, following a DP approach, using a HashMap as a table structure would not be recommended, since, although it uses less entries, it does so while still being more expensive in time and memory, due to time overhead and to using more memory per entry than a vector table.
Using the DP OPTIMIZED algorithm would require much less space with the expense of not being able to backtrack the used pallets and only outputting the maximum profit alone.

Optimal solution:

id, profit, weight
1, 1024, 1024
3, 512, 512
7, 256, 256
15, 128, 128
31, 64, 64
63, 32, 32
127, 16, 16
255, 8, 8
511, 4, 4
1023, 2, 2
2047, 1, 1

Total Weight: 2047
Maximum Profit: 2047

