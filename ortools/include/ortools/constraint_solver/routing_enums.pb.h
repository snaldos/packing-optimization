// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ortools/constraint_solver/routing_enums.proto
// Protobuf C++ Version: 5.29.3

#ifndef ortools_2fconstraint_5fsolver_2frouting_5fenums_2eproto_2epb_2eh
#define ortools_2fconstraint_5fsolver_2frouting_5fenums_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ortools_2fconstraint_5fsolver_2frouting_5fenums_2eproto OR_PROTO_DLL

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct OR_PROTO_DLL TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fenums_2eproto {
  static const ::uint32_t offsets[];
};
OR_PROTO_DLL extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fenums_2eproto;
namespace operations_research {
class FirstSolutionStrategy;
struct FirstSolutionStrategyDefaultTypeInternal;
OR_PROTO_DLL extern FirstSolutionStrategyDefaultTypeInternal _FirstSolutionStrategy_default_instance_;
class LocalSearchMetaheuristic;
struct LocalSearchMetaheuristicDefaultTypeInternal;
OR_PROTO_DLL extern LocalSearchMetaheuristicDefaultTypeInternal _LocalSearchMetaheuristic_default_instance_;
class RoutingSearchStatus;
struct RoutingSearchStatusDefaultTypeInternal;
OR_PROTO_DLL extern RoutingSearchStatusDefaultTypeInternal _RoutingSearchStatus_default_instance_;
}  // namespace operations_research
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace operations_research {
enum FirstSolutionStrategy_Value : int {
  FirstSolutionStrategy_Value_UNSET = 0,
  FirstSolutionStrategy_Value_AUTOMATIC = 15,
  FirstSolutionStrategy_Value_PATH_CHEAPEST_ARC = 3,
  FirstSolutionStrategy_Value_PATH_MOST_CONSTRAINED_ARC = 4,
  FirstSolutionStrategy_Value_EVALUATOR_STRATEGY = 5,
  FirstSolutionStrategy_Value_SAVINGS = 10,
  FirstSolutionStrategy_Value_PARALLEL_SAVINGS = 17,
  FirstSolutionStrategy_Value_SWEEP = 11,
  FirstSolutionStrategy_Value_CHRISTOFIDES = 13,
  FirstSolutionStrategy_Value_ALL_UNPERFORMED = 6,
  FirstSolutionStrategy_Value_BEST_INSERTION = 7,
  FirstSolutionStrategy_Value_PARALLEL_CHEAPEST_INSERTION = 8,
  FirstSolutionStrategy_Value_SEQUENTIAL_CHEAPEST_INSERTION = 14,
  FirstSolutionStrategy_Value_LOCAL_CHEAPEST_INSERTION = 9,
  FirstSolutionStrategy_Value_LOCAL_CHEAPEST_COST_INSERTION = 16,
  FirstSolutionStrategy_Value_GLOBAL_CHEAPEST_ARC = 1,
  FirstSolutionStrategy_Value_LOCAL_CHEAPEST_ARC = 2,
  FirstSolutionStrategy_Value_FIRST_UNBOUND_MIN_VALUE = 12,
  FirstSolutionStrategy_Value_FirstSolutionStrategy_Value_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  FirstSolutionStrategy_Value_FirstSolutionStrategy_Value_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

OR_PROTO_DLL bool FirstSolutionStrategy_Value_IsValid(int value);
OR_PROTO_DLL extern const uint32_t FirstSolutionStrategy_Value_internal_data_[];
constexpr FirstSolutionStrategy_Value FirstSolutionStrategy_Value_Value_MIN = static_cast<FirstSolutionStrategy_Value>(0);
constexpr FirstSolutionStrategy_Value FirstSolutionStrategy_Value_Value_MAX = static_cast<FirstSolutionStrategy_Value>(17);
constexpr int FirstSolutionStrategy_Value_Value_ARRAYSIZE = 17 + 1;
OR_PROTO_DLL const ::google::protobuf::EnumDescriptor*
FirstSolutionStrategy_Value_descriptor();
template <typename T>
const std::string& FirstSolutionStrategy_Value_Name(T value) {
  static_assert(std::is_same<T, FirstSolutionStrategy_Value>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Value_Name().");
  return FirstSolutionStrategy_Value_Name(static_cast<FirstSolutionStrategy_Value>(value));
}
template <>
inline const std::string& FirstSolutionStrategy_Value_Name(FirstSolutionStrategy_Value value) {
  return ::google::protobuf::internal::NameOfDenseEnum<FirstSolutionStrategy_Value_descriptor,
                                                 0, 17>(
      static_cast<int>(value));
}
inline bool FirstSolutionStrategy_Value_Parse(absl::string_view name, FirstSolutionStrategy_Value* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FirstSolutionStrategy_Value>(
      FirstSolutionStrategy_Value_descriptor(), name, value);
}
enum LocalSearchMetaheuristic_Value : int {
  LocalSearchMetaheuristic_Value_UNSET = 0,
  LocalSearchMetaheuristic_Value_AUTOMATIC = 6,
  LocalSearchMetaheuristic_Value_GREEDY_DESCENT = 1,
  LocalSearchMetaheuristic_Value_GUIDED_LOCAL_SEARCH = 2,
  LocalSearchMetaheuristic_Value_SIMULATED_ANNEALING = 3,
  LocalSearchMetaheuristic_Value_TABU_SEARCH = 4,
  LocalSearchMetaheuristic_Value_GENERIC_TABU_SEARCH = 5,
  LocalSearchMetaheuristic_Value_LocalSearchMetaheuristic_Value_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  LocalSearchMetaheuristic_Value_LocalSearchMetaheuristic_Value_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

OR_PROTO_DLL bool LocalSearchMetaheuristic_Value_IsValid(int value);
OR_PROTO_DLL extern const uint32_t LocalSearchMetaheuristic_Value_internal_data_[];
constexpr LocalSearchMetaheuristic_Value LocalSearchMetaheuristic_Value_Value_MIN = static_cast<LocalSearchMetaheuristic_Value>(0);
constexpr LocalSearchMetaheuristic_Value LocalSearchMetaheuristic_Value_Value_MAX = static_cast<LocalSearchMetaheuristic_Value>(6);
constexpr int LocalSearchMetaheuristic_Value_Value_ARRAYSIZE = 6 + 1;
OR_PROTO_DLL const ::google::protobuf::EnumDescriptor*
LocalSearchMetaheuristic_Value_descriptor();
template <typename T>
const std::string& LocalSearchMetaheuristic_Value_Name(T value) {
  static_assert(std::is_same<T, LocalSearchMetaheuristic_Value>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Value_Name().");
  return LocalSearchMetaheuristic_Value_Name(static_cast<LocalSearchMetaheuristic_Value>(value));
}
template <>
inline const std::string& LocalSearchMetaheuristic_Value_Name(LocalSearchMetaheuristic_Value value) {
  return ::google::protobuf::internal::NameOfDenseEnum<LocalSearchMetaheuristic_Value_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool LocalSearchMetaheuristic_Value_Parse(absl::string_view name, LocalSearchMetaheuristic_Value* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LocalSearchMetaheuristic_Value>(
      LocalSearchMetaheuristic_Value_descriptor(), name, value);
}
enum RoutingSearchStatus_Value : int {
  RoutingSearchStatus_Value_ROUTING_NOT_SOLVED = 0,
  RoutingSearchStatus_Value_ROUTING_SUCCESS = 1,
  RoutingSearchStatus_Value_ROUTING_PARTIAL_SUCCESS_LOCAL_OPTIMUM_NOT_REACHED = 2,
  RoutingSearchStatus_Value_ROUTING_FAIL = 3,
  RoutingSearchStatus_Value_ROUTING_FAIL_TIMEOUT = 4,
  RoutingSearchStatus_Value_ROUTING_INVALID = 5,
  RoutingSearchStatus_Value_ROUTING_INFEASIBLE = 6,
  RoutingSearchStatus_Value_ROUTING_OPTIMAL = 7,
  RoutingSearchStatus_Value_RoutingSearchStatus_Value_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RoutingSearchStatus_Value_RoutingSearchStatus_Value_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

OR_PROTO_DLL bool RoutingSearchStatus_Value_IsValid(int value);
OR_PROTO_DLL extern const uint32_t RoutingSearchStatus_Value_internal_data_[];
constexpr RoutingSearchStatus_Value RoutingSearchStatus_Value_Value_MIN = static_cast<RoutingSearchStatus_Value>(0);
constexpr RoutingSearchStatus_Value RoutingSearchStatus_Value_Value_MAX = static_cast<RoutingSearchStatus_Value>(7);
constexpr int RoutingSearchStatus_Value_Value_ARRAYSIZE = 7 + 1;
OR_PROTO_DLL const ::google::protobuf::EnumDescriptor*
RoutingSearchStatus_Value_descriptor();
template <typename T>
const std::string& RoutingSearchStatus_Value_Name(T value) {
  static_assert(std::is_same<T, RoutingSearchStatus_Value>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Value_Name().");
  return RoutingSearchStatus_Value_Name(static_cast<RoutingSearchStatus_Value>(value));
}
template <>
inline const std::string& RoutingSearchStatus_Value_Name(RoutingSearchStatus_Value value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RoutingSearchStatus_Value_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool RoutingSearchStatus_Value_Parse(absl::string_view name, RoutingSearchStatus_Value* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoutingSearchStatus_Value>(
      RoutingSearchStatus_Value_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class OR_PROTO_DLL RoutingSearchStatus final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:operations_research.RoutingSearchStatus) */ {
 public:
  inline RoutingSearchStatus() : RoutingSearchStatus(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RoutingSearchStatus* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RoutingSearchStatus));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RoutingSearchStatus(
      ::google::protobuf::internal::ConstantInitialized);

  inline RoutingSearchStatus(const RoutingSearchStatus& from) : RoutingSearchStatus(nullptr, from) {}
  inline RoutingSearchStatus(RoutingSearchStatus&& from) noexcept
      : RoutingSearchStatus(nullptr, std::move(from)) {}
  inline RoutingSearchStatus& operator=(const RoutingSearchStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutingSearchStatus& operator=(RoutingSearchStatus&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoutingSearchStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutingSearchStatus* internal_default_instance() {
    return reinterpret_cast<const RoutingSearchStatus*>(
        &_RoutingSearchStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(RoutingSearchStatus& a, RoutingSearchStatus& b) { a.Swap(&b); }
  inline void Swap(RoutingSearchStatus* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutingSearchStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoutingSearchStatus* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<RoutingSearchStatus>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RoutingSearchStatus& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RoutingSearchStatus& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "operations_research.RoutingSearchStatus"; }

 protected:
  explicit RoutingSearchStatus(::google::protobuf::Arena* arena);
  RoutingSearchStatus(::google::protobuf::Arena* arena, const RoutingSearchStatus& from);
  RoutingSearchStatus(::google::protobuf::Arena* arena, RoutingSearchStatus&& from) noexcept
      : RoutingSearchStatus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Value = RoutingSearchStatus_Value;
  static constexpr Value ROUTING_NOT_SOLVED = RoutingSearchStatus_Value_ROUTING_NOT_SOLVED;
  static constexpr Value ROUTING_SUCCESS = RoutingSearchStatus_Value_ROUTING_SUCCESS;
  static constexpr Value ROUTING_PARTIAL_SUCCESS_LOCAL_OPTIMUM_NOT_REACHED = RoutingSearchStatus_Value_ROUTING_PARTIAL_SUCCESS_LOCAL_OPTIMUM_NOT_REACHED;
  static constexpr Value ROUTING_FAIL = RoutingSearchStatus_Value_ROUTING_FAIL;
  static constexpr Value ROUTING_FAIL_TIMEOUT = RoutingSearchStatus_Value_ROUTING_FAIL_TIMEOUT;
  static constexpr Value ROUTING_INVALID = RoutingSearchStatus_Value_ROUTING_INVALID;
  static constexpr Value ROUTING_INFEASIBLE = RoutingSearchStatus_Value_ROUTING_INFEASIBLE;
  static constexpr Value ROUTING_OPTIMAL = RoutingSearchStatus_Value_ROUTING_OPTIMAL;
  static inline bool Value_IsValid(int value) {
    return RoutingSearchStatus_Value_IsValid(value);
  }
  static constexpr Value Value_MIN = RoutingSearchStatus_Value_Value_MIN;
  static constexpr Value Value_MAX = RoutingSearchStatus_Value_Value_MAX;
  static constexpr int Value_ARRAYSIZE = RoutingSearchStatus_Value_Value_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Value_descriptor() {
    return RoutingSearchStatus_Value_descriptor();
  }
  template <typename T>
  static inline const std::string& Value_Name(T value) {
    return RoutingSearchStatus_Value_Name(value);
  }
  static inline bool Value_Parse(absl::string_view name, Value* value) {
    return RoutingSearchStatus_Value_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:operations_research.RoutingSearchStatus)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RoutingSearchStatus& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fenums_2eproto;
};
// -------------------------------------------------------------------

class OR_PROTO_DLL LocalSearchMetaheuristic final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:operations_research.LocalSearchMetaheuristic) */ {
 public:
  inline LocalSearchMetaheuristic() : LocalSearchMetaheuristic(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LocalSearchMetaheuristic* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LocalSearchMetaheuristic));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LocalSearchMetaheuristic(
      ::google::protobuf::internal::ConstantInitialized);

  inline LocalSearchMetaheuristic(const LocalSearchMetaheuristic& from) : LocalSearchMetaheuristic(nullptr, from) {}
  inline LocalSearchMetaheuristic(LocalSearchMetaheuristic&& from) noexcept
      : LocalSearchMetaheuristic(nullptr, std::move(from)) {}
  inline LocalSearchMetaheuristic& operator=(const LocalSearchMetaheuristic& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalSearchMetaheuristic& operator=(LocalSearchMetaheuristic&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocalSearchMetaheuristic& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalSearchMetaheuristic* internal_default_instance() {
    return reinterpret_cast<const LocalSearchMetaheuristic*>(
        &_LocalSearchMetaheuristic_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(LocalSearchMetaheuristic& a, LocalSearchMetaheuristic& b) { a.Swap(&b); }
  inline void Swap(LocalSearchMetaheuristic* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalSearchMetaheuristic* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalSearchMetaheuristic* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<LocalSearchMetaheuristic>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const LocalSearchMetaheuristic& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const LocalSearchMetaheuristic& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "operations_research.LocalSearchMetaheuristic"; }

 protected:
  explicit LocalSearchMetaheuristic(::google::protobuf::Arena* arena);
  LocalSearchMetaheuristic(::google::protobuf::Arena* arena, const LocalSearchMetaheuristic& from);
  LocalSearchMetaheuristic(::google::protobuf::Arena* arena, LocalSearchMetaheuristic&& from) noexcept
      : LocalSearchMetaheuristic(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Value = LocalSearchMetaheuristic_Value;
  static constexpr Value UNSET = LocalSearchMetaheuristic_Value_UNSET;
  static constexpr Value AUTOMATIC = LocalSearchMetaheuristic_Value_AUTOMATIC;
  static constexpr Value GREEDY_DESCENT = LocalSearchMetaheuristic_Value_GREEDY_DESCENT;
  static constexpr Value GUIDED_LOCAL_SEARCH = LocalSearchMetaheuristic_Value_GUIDED_LOCAL_SEARCH;
  static constexpr Value SIMULATED_ANNEALING = LocalSearchMetaheuristic_Value_SIMULATED_ANNEALING;
  static constexpr Value TABU_SEARCH = LocalSearchMetaheuristic_Value_TABU_SEARCH;
  static constexpr Value GENERIC_TABU_SEARCH = LocalSearchMetaheuristic_Value_GENERIC_TABU_SEARCH;
  static inline bool Value_IsValid(int value) {
    return LocalSearchMetaheuristic_Value_IsValid(value);
  }
  static constexpr Value Value_MIN = LocalSearchMetaheuristic_Value_Value_MIN;
  static constexpr Value Value_MAX = LocalSearchMetaheuristic_Value_Value_MAX;
  static constexpr int Value_ARRAYSIZE = LocalSearchMetaheuristic_Value_Value_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Value_descriptor() {
    return LocalSearchMetaheuristic_Value_descriptor();
  }
  template <typename T>
  static inline const std::string& Value_Name(T value) {
    return LocalSearchMetaheuristic_Value_Name(value);
  }
  static inline bool Value_Parse(absl::string_view name, Value* value) {
    return LocalSearchMetaheuristic_Value_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:operations_research.LocalSearchMetaheuristic)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LocalSearchMetaheuristic& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fenums_2eproto;
};
// -------------------------------------------------------------------

class OR_PROTO_DLL FirstSolutionStrategy final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:operations_research.FirstSolutionStrategy) */ {
 public:
  inline FirstSolutionStrategy() : FirstSolutionStrategy(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FirstSolutionStrategy* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FirstSolutionStrategy));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FirstSolutionStrategy(
      ::google::protobuf::internal::ConstantInitialized);

  inline FirstSolutionStrategy(const FirstSolutionStrategy& from) : FirstSolutionStrategy(nullptr, from) {}
  inline FirstSolutionStrategy(FirstSolutionStrategy&& from) noexcept
      : FirstSolutionStrategy(nullptr, std::move(from)) {}
  inline FirstSolutionStrategy& operator=(const FirstSolutionStrategy& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirstSolutionStrategy& operator=(FirstSolutionStrategy&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FirstSolutionStrategy& default_instance() {
    return *internal_default_instance();
  }
  static inline const FirstSolutionStrategy* internal_default_instance() {
    return reinterpret_cast<const FirstSolutionStrategy*>(
        &_FirstSolutionStrategy_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(FirstSolutionStrategy& a, FirstSolutionStrategy& b) { a.Swap(&b); }
  inline void Swap(FirstSolutionStrategy* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FirstSolutionStrategy* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FirstSolutionStrategy* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<FirstSolutionStrategy>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const FirstSolutionStrategy& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const FirstSolutionStrategy& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "operations_research.FirstSolutionStrategy"; }

 protected:
  explicit FirstSolutionStrategy(::google::protobuf::Arena* arena);
  FirstSolutionStrategy(::google::protobuf::Arena* arena, const FirstSolutionStrategy& from);
  FirstSolutionStrategy(::google::protobuf::Arena* arena, FirstSolutionStrategy&& from) noexcept
      : FirstSolutionStrategy(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Value = FirstSolutionStrategy_Value;
  static constexpr Value UNSET = FirstSolutionStrategy_Value_UNSET;
  static constexpr Value AUTOMATIC = FirstSolutionStrategy_Value_AUTOMATIC;
  static constexpr Value PATH_CHEAPEST_ARC = FirstSolutionStrategy_Value_PATH_CHEAPEST_ARC;
  static constexpr Value PATH_MOST_CONSTRAINED_ARC = FirstSolutionStrategy_Value_PATH_MOST_CONSTRAINED_ARC;
  static constexpr Value EVALUATOR_STRATEGY = FirstSolutionStrategy_Value_EVALUATOR_STRATEGY;
  static constexpr Value SAVINGS = FirstSolutionStrategy_Value_SAVINGS;
  static constexpr Value PARALLEL_SAVINGS = FirstSolutionStrategy_Value_PARALLEL_SAVINGS;
  static constexpr Value SWEEP = FirstSolutionStrategy_Value_SWEEP;
  static constexpr Value CHRISTOFIDES = FirstSolutionStrategy_Value_CHRISTOFIDES;
  static constexpr Value ALL_UNPERFORMED = FirstSolutionStrategy_Value_ALL_UNPERFORMED;
  static constexpr Value BEST_INSERTION = FirstSolutionStrategy_Value_BEST_INSERTION;
  static constexpr Value PARALLEL_CHEAPEST_INSERTION = FirstSolutionStrategy_Value_PARALLEL_CHEAPEST_INSERTION;
  static constexpr Value SEQUENTIAL_CHEAPEST_INSERTION = FirstSolutionStrategy_Value_SEQUENTIAL_CHEAPEST_INSERTION;
  static constexpr Value LOCAL_CHEAPEST_INSERTION = FirstSolutionStrategy_Value_LOCAL_CHEAPEST_INSERTION;
  static constexpr Value LOCAL_CHEAPEST_COST_INSERTION = FirstSolutionStrategy_Value_LOCAL_CHEAPEST_COST_INSERTION;
  static constexpr Value GLOBAL_CHEAPEST_ARC = FirstSolutionStrategy_Value_GLOBAL_CHEAPEST_ARC;
  static constexpr Value LOCAL_CHEAPEST_ARC = FirstSolutionStrategy_Value_LOCAL_CHEAPEST_ARC;
  static constexpr Value FIRST_UNBOUND_MIN_VALUE = FirstSolutionStrategy_Value_FIRST_UNBOUND_MIN_VALUE;
  static inline bool Value_IsValid(int value) {
    return FirstSolutionStrategy_Value_IsValid(value);
  }
  static constexpr Value Value_MIN = FirstSolutionStrategy_Value_Value_MIN;
  static constexpr Value Value_MAX = FirstSolutionStrategy_Value_Value_MAX;
  static constexpr int Value_ARRAYSIZE = FirstSolutionStrategy_Value_Value_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Value_descriptor() {
    return FirstSolutionStrategy_Value_descriptor();
  }
  template <typename T>
  static inline const std::string& Value_Name(T value) {
    return FirstSolutionStrategy_Value_Name(value);
  }
  static inline bool Value_Parse(absl::string_view name, Value* value) {
    return FirstSolutionStrategy_Value_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:operations_research.FirstSolutionStrategy)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FirstSolutionStrategy& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fenums_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// FirstSolutionStrategy

// -------------------------------------------------------------------

// LocalSearchMetaheuristic

// -------------------------------------------------------------------

// RoutingSearchStatus

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace operations_research


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::operations_research::FirstSolutionStrategy_Value> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::operations_research::FirstSolutionStrategy_Value>() {
  return ::operations_research::FirstSolutionStrategy_Value_descriptor();
}
template <>
struct is_proto_enum<::operations_research::LocalSearchMetaheuristic_Value> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::operations_research::LocalSearchMetaheuristic_Value>() {
  return ::operations_research::LocalSearchMetaheuristic_Value_descriptor();
}
template <>
struct is_proto_enum<::operations_research::RoutingSearchStatus_Value> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::operations_research::RoutingSearchStatus_Value>() {
  return ::operations_research::RoutingSearchStatus_Value_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // ortools_2fconstraint_5fsolver_2frouting_5fenums_2eproto_2epb_2eh
